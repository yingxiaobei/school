/*
Copyright 2013 Yahoo! Inc. All rights reserved.
Licensed under the BSD License.
http://yuilibrary.com/license/
*/
(function (c, a) {
  var b = a();
  if (typeof module === 'object' && module) {
    module.exports = b;
  }
  if (typeof define === 'function' && define.amd) {
    define(a);
  }
  c.PromisePolyfill = b;
  c.Promise || (c.Promise = b);
})(typeof global !== 'undefined' ? global : this, function () {
  if (window.Promise) {
    return;
  }
  function a(e) {
    return Object.prototype.toString.call(e) === '[object Array]';
  }
  function b(f, e) {
    for (var g in e) {
      if (e.hasOwnProperty(g)) {
        f[g] = e[g];
      }
    }
  }
  function c(f) {
    if (!(this instanceof c)) {
      throw new TypeError(this + 'is not a promise');
    }
    if (typeof f !== 'function') {
      throw new TypeError('Promise resolver ' + f + ' is not a function');
    }
    var h = new d();
    this._resolver = h;
    try {
      f(
        function (e) {
          h.resolve(e);
        },
        function (e) {
          h.reject(e);
        },
      );
    } catch (g) {
      h.reject(g);
    }
  }
  b(c.prototype, {
    then: function (i, e) {
      var g,
        f,
        h = new this.constructor(function (k, j) {
          g = k;
          f = j;
        });
      this._resolver._addCallbacks(
        typeof i === 'function' ? c._makeCallback(h, g, f, i) : g,
        typeof e === 'function' ? c._makeCallback(h, g, f, e) : f,
      );
      return h;
    },
    catch: function (e) {
      return this.then(undefined, e);
    },
  });
  c._makeCallback = function (h, g, f, e) {
    return function (j) {
      var i;
      try {
        i = e(j);
      } catch (k) {
        f(k);
        return;
      }
      if (i === h) {
        f(new TypeError('Cannot resolve a promise with itself'));
        return;
      }
      g(i);
    };
  };
  c.resolve = function (e) {
    if (e && e.constructor === this) {
      return e;
    }
    return new this(function (f) {
      f(e);
    });
  };
  c.reject = function (e) {
    var f = new this(function () {});
    f._resolver._result = e;
    f._resolver._status = 'rejected';
    return f;
  };
  c.all = function (e) {
    var f = this;
    return new f(function (n, m) {
      if (!a(e)) {
        m(new TypeError('Promise.all expects an array of values or promises'));
        return;
      }
      var j = e.length,
        h = 0,
        k = e.length,
        g = [];
      function l(i) {
        return function (o) {
          g[i] = o;
          j--;
          if (!j) {
            n(g);
          }
        };
      }
      if (k < 1) {
        return n(g);
      }
      for (; h < k; h++) {
        f.resolve(e[h]).then(l(h), m);
      }
    });
  };
  c.race = function (e) {
    var f = this;
    return new f(function (k, j) {
      if (!a(e)) {
        j(new TypeError('Promise.race expects an array of values or promises'));
        return;
      }
      for (var g = 0, h = e.length; g < h; g++) {
        f.resolve(e[g]).then(k, j);
      }
    });
  };
  c.async =
    typeof setImmediate !== 'undefined'
      ? function (e) {
          setImmediate(e);
        }
      : typeof process !== 'undefined' && process.nextTick
      ? process.nextTick
      : function (e) {
          setTimeout(e, 0);
        };
  function d() {
    this._callbacks = [];
    this._errbacks = [];
    this._status = 'pending';
    this._result = null;
  }
  b(d.prototype, {
    fulfill: function (f) {
      var e = this._status;
      if (e === 'pending' || e === 'accepted') {
        this._result = f;
        this._status = 'fulfilled';
      }
      if (this._status === 'fulfilled') {
        this._notify(this._callbacks, this._result);
        this._callbacks = [];
        this._errbacks = null;
      }
    },
    reject: function (f) {
      var e = this._status;
      if (e === 'pending' || e === 'accepted') {
        this._result = f;
        this._status = 'rejected';
      }
      if (this._status === 'rejected') {
        this._notify(this._errbacks, this._result);
        this._callbacks = null;
        this._errbacks = [];
      }
    },
    resolve: function (e) {
      if (this._status === 'pending') {
        this._status = 'accepted';
        this._value = e;
        if ((this._callbacks && this._callbacks.length) || (this._errbacks && this._errbacks.length)) {
          this._unwrap(this._value);
        }
      }
    },
    _unwrap: function (h) {
      var g = this,
        f = false,
        j;
      if (!h || (typeof h !== 'object' && typeof h !== 'function')) {
        g.fulfill(h);
        return;
      }
      try {
        j = h.then;
        if (typeof j === 'function') {
          j.call(
            h,
            function (e) {
              if (!f) {
                f = true;
                g._unwrap(e);
              }
            },
            function (e) {
              if (!f) {
                f = true;
                g.reject(e);
              }
            },
          );
        } else {
          g.fulfill(h);
        }
      } catch (i) {
        if (!f) {
          g.reject(i);
        }
      }
    },
    _addCallbacks: function (h, f) {
      var e = this._callbacks,
        g = this._errbacks;
      if (e) {
        e.push(h);
      }
      if (g) {
        g.push(f);
      }
      switch (this._status) {
        case 'accepted':
          this._unwrap(this._value);
          break;
        case 'fulfilled':
          this.fulfill(this._result);
          break;
        case 'rejected':
          this.reject(this._result);
          break;
      }
    },
    _notify: function (f, e) {
      if (f.length) {
        c.async(function () {
          var h, g;
          for (h = 0, g = f.length; h < g; ++h) {
            f[h](e);
          }
        });
      }
    },
  });
  c.Resolver = d;
  return c;
});
